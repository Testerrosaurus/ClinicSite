// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Models;

namespace server.Migrations.Appointments
{
    [DbContext(typeof(AppointmentsContext))]
    partial class AppointmentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("server.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date");

                    b.Property<long?>("DoctorId");

                    b.Property<long?>("InfoId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Status");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("InfoId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("server.Models.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("server.Models.DoctorProcedure", b =>
                {
                    b.Property<long>("DoctorId");

                    b.Property<long>("ProcedureId");

                    b.HasKey("DoctorId", "ProcedureId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("DoctorProcedures");
                });

            modelBuilder.Entity("server.Models.Information", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatientName");

                    b.Property<long?>("ProcedureId");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("server.Models.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("server.Models.Appointment", b =>
                {
                    b.HasOne("server.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("server.Models.Information", "Info")
                        .WithMany()
                        .HasForeignKey("InfoId");
                });

            modelBuilder.Entity("server.Models.DoctorProcedure", b =>
                {
                    b.HasOne("server.Models.Doctor", "Doctor")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("server.Models.Procedure", "Procedure")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Models.Information", b =>
                {
                    b.HasOne("server.Models.Procedure", "Procedure")
                        .WithMany()
                        .HasForeignKey("ProcedureId");
                });
#pragma warning restore 612, 618
        }
    }
}
